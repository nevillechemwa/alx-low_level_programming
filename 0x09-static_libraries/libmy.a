!<arch>
0-isupper.c/    0           0     0     644     237       `
#include "main.h"

/**
 * _isupper - Check if a leter is upper
 * @a: The number to be checked
 *
 * Return: 1 for the upper letter or 0 for any else
 */
int _isupper(int a)
{
	if (a >= 65 && a <= 90)
	{
		return (1);
	}

	return (0);
}

0-memset.c/     0           0     0     644     305       `
#include "main.h"

/**
 * _memset - Fill memory with a constant byte
 * @s: memory area
 * @b: constant byte
 * @n: bytes of the memory area to be filed
 * Return: memory area
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int a;

	for (a = 0; a < n; a++)
	{
		s[a] = b;
	}
	return (s);
}

0-strcat.c/     0           0     0     644     303       `
#include "main.h"

/**
 * _strcat - function that concatenates a string
 * @dest: input string
 * @src: input string
 * Return: points to a string
 */
char *_strcat(char *dest, char *src)
{
	char *temp = dest;

	while (*dest)
		dest++;
	while (*src)
		*dest++ = *src++;
	*dest = '\0';
	return (temp);
}

100-atoi.c/     0           0     0     644     431       `
#include "main.h"

/**
 * _atoi - Convert a string to an integer.
 * @s: The pointer to convert
 * Return: A integer
 */
int _atoi(char *s)
{
	int c = 0;
	unsigned int ni = 0;
	int min = 1;
	int isi = 0;

	while (s[c])
	{
		if (s[c] == 45)
		{
			min *= -1;
		}
		while (s[c] >= 48 && s[c] <= 57)
		{
			isi = 1;
			ni = (ni * 10) + (s[c] - '0');
			c++;
		}
		if (isi == 1)
		{
			break;
		}
		c++;
	}
	ni *= min;
	return (ni);
}

1-isdigit.c/    0           0     0     644     259       `
#include "main.h"

/**
 * _isdigit - Check if a character is a digit
 * @c: The number to be checked
 *
 * Return: 1 for a character that will be a digit or 0 for any else
 */
int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
	{
		return (1);
	}

	return (0);
}

1-memcpy.c/     0           0     0     644     304       `
#include "main.h"

/**
 * _memcpy - copy memory
 * @dest: dest memory
 * @src: source memory
 * @n: bytes from the memory to be copied
 * Return: memory area
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int a;

	for (a = 0; a < n; a++)
	{
		dest[a] = src[a];
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     493       `
#include "main.h"

/**
 * _strncat - a function that concatenates two strings
 * @dest: an input string
 * @src: an input string
 * @n: an input integer
 * Return: A pointer to the resulting string
 */
char *_strncat(char *dest, char *src, int n)
{
	int srclen = 0, i = 0;
	char *temp = dest, *start = src;

	while (*src)
	{
		srclen++;
		src++;
	}
	while (*dest)
		dest++;
	if (n > srclen)
		n = srclen;
	src = start;

	for (; i < n; i++)
		*dest++ = *src++;
	*dest = '\0';
	return (temp);
}

2-strchr.c/     0           0     0     644     323       `
#include "main.h"

/**
 * _strchr - locates characte in a string
 * @s: source string
 * @c: character
 * Return: string from character found
 */
char *_strchr(char *s, char c)
{
	int a = 0, b;

	while (s[a])
	{
		a++;
	}
	for (b = 0; b <= a; b++)
	{
		if (c == s[b])
		{
			s += b;
			return (s);
		}
	}
	return ('\0');
}

2-strlen.c/     0           0     0     644     211       `
#include "main.h"

/**
 * _strlen - Returns the length of a string
 * @s: String to count
 *
 * Return: String length
 */
int _strlen(char *s)
{
	int i = 0;

	for (; *s != '\0'; s++)
	{
		i++;
	}
	return (i);
}

2-strncpy.c/    0           0     0     644     363       `
#include "main.h"

/**
 * _strncpy - Copy a string
 * @dest: The destination
 * @src: The source
 * @n: The copy limit
 * Return: char value
 */
char *_strncpy(char *dest, char *src, int n)
{
	int a = 0, b = 0;

	while (src[b])
	{
		b++;
	}
	while (a < n && src[a])
	{
		dest[a] = src[a];
		a++;
	}
	while (a < n)
	{
		dest[a] = '\0';
		a++;
	}
	return (dest);
}

3-islower.c/    0           0     0     644     214       `
#include  "main.h"

/**
 * _islower -> checking if the character is lower
 * @c: a character argument
 * Return: return 1 or 0 depending on the condition
 */
int _islower(int c)
{
	return (c >= 'a' && c <= 'z');
}
3-puts.c/       0           0     0     644     209       `
#include "main.h"

/**
 * _puts - prints a string
 * @str: string tto print
 * Return: void
 */
void _puts(char *str)
{
	int i = 0;

	while (str[i] != '\0')
	{
		_putchar(str[i]);
		i++;
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     291       `
#include "main.h"

/**
 * _strcmp - Compares two strings
 * @s1: The first string
 * @s2: The second string
 * Return: differences between s1 and s2
 */
int _strcmp(char *s1, char *s2)
{
	while (*s1 && *s2)
	{
		if (*s1 != *s2)
			return (*s1 - *s2);
		s1++, s2++;
	}
	return (*s1 - *s2);
}

3-strspn.c/     0           0     0     644     349       `
#include "main.h"

/**
 * _strspn - search a string
 * @s: source string
 * @accept: accepted string
 * Return: number of bytes
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int a = 0, b, t = 0;

	while (accept[a])
	{
		b = 0;

		while (s[b] != 32)
		{
			if (accept[a] == s[b])
			{
				t++;
			}
			b++;
		}
		a++;
	}
	return (t);
}

4-isalpha.c/    0           0     0     644     245       `
#include "main.h"

/**
 * _isalpha - check for alphabetical letters
 * @c: a character to be checked on
 * Return: returns 0 or 1 depending on the condition
 */
int _isalpha(int c)
{
	return ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'));
}

4-strpbrk.c/    0           0     0     644     339       `
#include "main.h"

/**
 * _strpbrk - searches a string
 * @s: source string
 * @accept: accepted char
 * Return: the string
 */
char *_strpbrk(char *s, char *accept)
{
	int a = 0, b;

	while (s[a])
	{
		b = 0;

		while (accept[b])
		{
			if (s[a] == accept[b])
			{
				s += a;
				return (s);
			}
			b++;
		}
		a++;
	}
	return ('\0');
}

5-strstr.c/     0           0     0     644     402       `
#include "main.h"

/**
 * _strstr - locates a string
 * @haystack: string to search
 * @needle: string to find
 * Return: char
 */
char *_strstr(char *haystack, char *needle)
{
	int a = 0, b = 0;

	while (haystack[a])
	{
		while (needle[b])
		{
			if (haystack[a + b] != needle[b])
			{
				break;
			}
			b++;
		}
		if (needle[b] == '\0')
		{
			return (haystack + a);
		}
		a++;
	}
	return ('\0');
}
6-abs.c/        0           0     0     644     182       `
#include "main.h"

/**
 * _abs -> return absolute value of a number
 * @n: parameter
 * Return: absolute value of a number
 */
int _abs(int n)
{
	if (n < 0)
		n = -n;
	return (n);
}
9-strcpy.c/     0           0     0     644     280       `
#include "main.h"

/**
 * _strcpy - Copy a string
 * @dest: Destination value
 * @src: Source value
 * Return: the pointer to dest
 */
char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}
	dest[i++] = '\0';
	return (dest);
}
_putchar.c/     0           0     0     644     244       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}
